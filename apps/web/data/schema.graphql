# The root of all queries
type Query {
  motivations(
    # Returns the items in the list that come after the specified cursor.
    after: String

    # Returns the first n items from the list.
    first: Int

    # Returns the items in the list that come before the specified cursor.
    before: String

    # Returns the last n items from the list.
    last: Int
  ): MotivationConnection!
  motivation(id: ID!): Motivation

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Fetches objects given their IDs
  nodes(
    # The IDs of objects
    ids: [ID!]!
  ): [Node]!
}

# A connection to a list of items.
type MotivationConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MotivationEdge]
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# An edge in a connection.
type MotivationEdge {
  # The item at the end of the edge
  node: Motivation

  # A cursor for use in pagination
  cursor: String!
}

# Motivation Type
type Motivation implements Node {
  # The ID of an object
  id: ID!
  phrase: String
  author: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Mutation {
  CreateMotivation(input: CreateMotivationInput!): CreateMotivationPayload
  DeleteMotivation(input: DeleteMutationInput!): DeleteMutationPayload
  UpdateMotivation(input: DeleteMotivationInput!): DeleteMotivationPayload
}

type CreateMotivationPayload {
  motivationEdge: MotivationEdge
  success: String
  clientMutationId: String
}

input CreateMotivationInput {
  phrase: String!
  author: String!
  clientMutationId: String
}

type DeleteMutationPayload {
  message: String
  clientMutationId: String
}

input DeleteMutationInput {
  id: ID
  clientMutationId: String
}

type DeleteMotivationPayload {
  message: String
  motivationEdge: MotivationEdge
  clientMutationId: String
}

input DeleteMotivationInput {
  author: String!
  phrase: String!
  id: ID
  clientMutationId: String
}
